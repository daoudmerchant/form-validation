/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const validateForm = (function () {\n  let regexObj = {\n    country: new RegExp(\n      'afghanistan|' +\n        'albania|' +\n        'algeria|' +\n        'andorra|' +\n        'angola|' +\n        'antigua and barbuda|' +\n        'argentina|' +\n        'armenia|' +\n        'australia|' +\n        'austria|' +\n        'azerbaijan|' +\n        'bahamas|' +\n        'bahrain|' +\n        'bangladesh|' +\n        'barbados|' +\n        'belarus|' +\n        'belgium|' +\n        'belize|' +\n        'benin|' +\n        'bhutan|' +\n        'bolivia|' +\n        'bosnia and herzogovina|' +\n        'bosnia|' +\n        'herzogovina|' +\n        'bosnia herzogovina|' +\n        'botswana|' +\n        'brazil|' +\n        'brunei|' +\n        'bulgaria|' +\n        'burkina faso|' +\n        'burundi|' +\n        \"c[o√¥]te d[']ivoire|\" +\n        'cambo verde|' +\n        'cameroon|' +\n        'canada|' +\n        'central african republic|' +\n        'chad|' +\n        'chile|' +\n        'china|' +\n        'colombia|' +\n        'comoros|' +\n        'congo|' +\n        'congo[-\\\\s]brazzaville|' +\n        'costa rica|' +\n        'croatia|' +\n        'cuba|' +\n        'cyprus|' +\n        'czechia|' +\n        'czech republic|' +\n        'democratic republic of the congo|' +\n        'denmark|' +\n        'djibouti|' +\n        'dominica|' +\n        'dominican republic|' +\n        'ecuador|' +\n        'egypt|' +\n        'el salvador|' +\n        'equatorial guinea|' +\n        'eritrea|' +\n        'estonia|' +\n        'eswatini|' +\n        'swaziland|' +\n        'ethiopia|' +\n        'fiji|' +\n        'finland|' +\n        'france|' +\n        'gabon|' +\n        'gambia|' +\n        'georgia|' +\n        'germany|' +\n        'ghana|' +\n        'greece|' +\n        'grenada|' +\n        'guatemala|' +\n        'guinea|' +\n        'guinea[-\\\\s]bissau|' +\n        'guyana|' +\n        'haiti|' +\n        'holy see|' +\n        'honduras|' +\n        'hungary|' +\n        'iceland|' +\n        'india|' +\n        'indonesia|' +\n        'iran|' +\n        'iraq|' +\n        'ireland|' +\n        'israel|' +\n        'italy|' +\n        'jamaica|' +\n        'japan|' +\n        'jordan|' +\n        'kazakhstan|' +\n        'kenya|' +\n        'kiribati|' +\n        'kuwait|' +\n        'kyrgyzstan|' +\n        'laos|' +\n        'latvia|' +\n        'lebanon|' +\n        'lesotho|' +\n        'liberia|' +\n        'libya|' +\n        'liechtenstein|' +\n        'lithuania|' +\n        'luxembourg|' +\n        'madagascar|' +\n        'malawi|' +\n        'malaysia|' +\n        'maldives|' +\n        'mali|' +\n        'malta|' +\n        'marshall islands|' +\n        'mauritiana|' +\n        'mauritius|' +\n        'mexico|' +\n        'micronesia|' +\n        'moldova|' +\n        'monaco|' +\n        'mongolia|' +\n        'montenegro|' +\n        'morocco|' +\n        'mozambique|' +\n        'myanmar|' +\n        'burma|' +\n        'namibia|' +\n        'nauru|' +\n        'nepal|' +\n        'netherlands|' +\n        'new zealand|' +\n        'nicaragua|' +\n        'niger|' +\n        'nigeria|' +\n        'north korea|' +\n        'north macedonia|' +\n        'norway|' +\n        'oman|' +\n        'pakistan|' +\n        'palau|' +\n        'palestine( state)?|' +\n        'panama|' +\n        'papau new guinea|' +\n        'paraguay|' +\n        'peru|' +\n        'philippines|' +\n        'poland|' +\n        'portugal|' +\n        'qatar|' +\n        'romania|' +\n        'russia|' +\n        'rwanda|' +\n        'saint kitts and nevis|' +\n        'saint lucia|' +\n        'saint vincent and the grenadines|' +\n        'samoa|' +\n        'san marino|' +\n        'sao tome and principe|' +\n        'saudi arabia|' +\n        'senegal|' +\n        'serbia|' +\n        'seychelles|' +\n        'sierra leone|' +\n        'singapore|' +\n        'slovakia|' +\n        'slovenia|' +\n        'solomon islands|' +\n        'somalia|' +\n        'south africa|' +\n        'south korea|' +\n        'south sudan|' +\n        'spain|' +\n        'sri lanka|' +\n        'sudan|' +\n        'suriname|' +\n        'sweden|' +\n        'switzerland|' +\n        'syria|' +\n        'tajikistan|' +\n        'tanzania|' +\n        'thailand|' +\n        'timor[-\\\\s]leste|' +\n        'togo|' +\n        'tonga|' +\n        'trinidad and tobago|' +\n        'tunisia|' +\n        'turkey|' +\n        'turkmenistan|' +\n        'tuvalu|' +\n        'uganda|' +\n        'ukraine|' +\n        'united arab emirates|' +\n        'united kingdom|' +\n        'united states of america|' +\n        'uruguay|' +\n        'uzbekistan|' +\n        'vanuatu|' +\n        'venezuela|' +\n        'vietnam|' +\n        'yemen|' +\n        'zambia|' +\n        'zimbabwe',\n      'i'\n    ),\n    postcode: /[a-zA-Z]{1,2}[0-9]{1,2}[a-zA-Z]?\\s?[0-9][a-zA-Z]{2}/,\n    password: /(?=.*\\d)(?=.*[A-Z])(?=.*[\\\\/!@#$%^&*(),.?\":{}|<>])/,\n    confpassword: undefined,\n  }\n  const format = (function () {\n    // left out of makeCountry() in case more input values requiring it are added to form later\n    const makeUppercase = function (string) {\n      let words\n      if (string.includes('-')) {\n        words = string.split('-')\n      } else {\n        words = string.split(' ')\n      }\n      words = words.map((word) => {\n        const conjunctionRegex = /and|of|the/i\n        if (word.match(conjunctionRegex)) {\n          return word.toLowerCase()\n        }\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n      })\n      return words.join(' ')\n    }\n    const makePostcode = function (string) {\n      if (string.charAt(string.length - 4) !== ' ') {\n        string = string.slice(0, -3) + ' ' + string.slice(-3)\n      }\n      return string.toUpperCase()\n    }\n    const makeCountry = function (string) {\n      const countryOptions = Array.from(document.querySelectorAll('option'))\n      const countries = countryOptions.map(\n        (countryOption) => countryOption.textContent\n      )\n      const userCountry = makeUppercase(string)\n      let foundCountry = countries.find((country) => {\n        return country.startsWith(userCountry)\n      })\n      if (!foundCountry) {\n        foundCountry = countries.find((country) => {\n          return country.includes(userCountry)\n        })\n      }\n      if (!foundCountry) {\n        foundCountry = countries.find((country) => {\n          return country === userCountry.replace(' ', '-')\n        })\n      }\n      return foundCountry\n    }\n    return {\n      postcode: makePostcode,\n      country: makeCountry,\n    }\n  })()\n  const validate = (function () {\n    const validateCustom = (function () {\n      const validateString = function (string, id) {\n        if (!string.match(regexObj[id])) {\n          return [false, `Please provide a valid ${id}`]\n        }\n        if (format.hasOwnProperty(id)) {\n          return [true, format[id](string)]\n        }\n        return true\n      }\n      const validatePassword = function (string) {\n        if (!string.match(regexObj.password)) {\n          regexObj.confpassword = undefined\n          return [\n            false,\n            'Please note that your password must contain at least 1 upper case letter, 1 number and 1 special character',\n          ]\n        }\n        // is a valid password\n        regexObj.confpassword = string\n        return true\n      }\n      const confirmPassword = function (string) {\n        if (!regexObj.confpassword) {\n          return [false, 'Please provide a valid password first']\n        } else if (string !== regexObj.confpassword) {\n          return [false, 'Please make sure that your passwords match']\n        }\n        return true\n      }\n      return {\n        string: validateString,\n        password: validatePassword,\n        confpassword: confirmPassword,\n      }\n    })()\n    const validateInput = function (element) {\n      if (element.id === 'password' && !element.validity.valid) {\n        regexObj.confpassword = undefined\n      }\n      if (element.hasAttribute('minlength') && element.validity.tooShort) {\n        return [\n          false,\n          `Please make sure that your ${\n            element.id\n          } is at least ${element.getAttribute('minlength')} characters`,\n        ]\n      } else if (\n        (element.hasAttribute('type') && element.validity.typeMismatch) ||\n        (element.validity.valueMissing && element.id !== 'confpassword')\n      ) {\n        return [false, `Please provide a valid ${element.id}`]\n      } else if (validateCustom.hasOwnProperty(element.id)) {\n        return validateCustom[element.id](element.value)\n      } else {\n        return validateCustom.string(element.value, element.id)\n      }\n    }\n    return validateInput\n  })()\n  const handleInput = function (element) {\n    const errorMessage = element.parentElement.lastElementChild\n    const icon = errorMessage.previousElementSibling\n    const addTick = function (check, message) {\n      const clearError = function (check, message) {\n        check.classList.remove('reject')\n        check.textContent = '‚úì'\n        check.classList.add('accept')\n        message.textContent = ''\n      }\n      clearError(check, message)\n      message.textContent = ''\n    }\n    const inputValidity = validate(element)\n    if (inputValidity.length) {\n      // is array\n      if (inputValidity[0]) {\n        // is true with updated value\n        addTick(icon, errorMessage)\n        element.value = inputValidity[1]\n      } else {\n        // is false with error message\n        const addCross = function (check) {\n          check.classList.remove('accept')\n          check.textContent = '√ó'\n          check.classList.add('reject')\n        }\n        addCross(icon)\n        errorMessage.textContent = inputValidity[1]\n      }\n    } else {\n      // is true\n      addTick(icon, errorMessage)\n    }\n    if (element.id === 'password') {\n      const confPassword = document.querySelector('#confpassword') // requery DOM to save complicating function\n      console.log(confPassword)\n      if (confPassword.value) {\n        handleInput(confPassword)\n      }\n    }\n    return inputValidity\n  }\n  const submitForm = function (e, inputs) {\n    let allValid = true\n    inputs.forEach((input) => {\n      const isValid = handleInput(input)\n      if (isValid.length && !isValid[0]) {\n        allValid = false\n      }\n    })\n    if (!allValid) {\n      e.preventDefault()\n    } else {\n      return alert(\n        'Congratulations, you are now subscribed to My Little Pony Magazine'\n      )\n    }\n  }\n  return {\n    handleInput,\n    submitForm,\n  }\n  // return handleinput and form validation function in object\n})()\n\n// on load\n\n;(function () {\n  const form = document.querySelector('form')\n  const inputs = Array.from(document.querySelectorAll('input'))\n  // const [email, country, postcode, password, confPassword] = inputs\n  form.addEventListener('submit', (e) => validateForm.submitForm(e, inputs))\n  inputs.forEach((input) =>\n    input.addEventListener('input', (e) => validateForm.handleInput(e.target))\n  )\n})()\n\n\n//# sourceURL=webpack://my-webpack-project/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;